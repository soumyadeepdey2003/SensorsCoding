import com.fasterxml.jackson.databind.ObjectMapper;
import com.trex.iot_backend.model.DHTModel;
import com.trex.iot_backend.service.DHTService;
import jakarta.annotation.PostConstruct;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.eclipse.paho.client.mqttv3.*;
import org.springframework.stereotype.Component;

@Component
@Slf4j
@RequiredArgsConstructor
public class MqttSubscriber {

    private final DHTService dhtService;
    private final ObjectMapper objectMapper = new ObjectMapper(); // to parse JSON

    private final String MQTT_BROKER = "tcp://localhost:1883";
    private final String MQTT_TOPIC = "iot/dht22";
    private final String CLIENT_ID = "spring-boot-subscriber";

    @PostConstruct
    public void subscribe() {
        try {
            MqttClient client = new MqttClient(MQTT_BROKER, CLIENT_ID, null);
            MqttConnectOptions options = new MqttConnectOptions();
            options.setCleanSession(true);
            client.connect(options);

            client.subscribe(MQTT_TOPIC, (topic, message) -> {
                String payload = new String(message.getPayload());
                log.info("Received MQTT message: {}", payload);

                try {
                    // Assuming message is JSON with time, location, temperature, humidity
                    DHTModel dhtModel = objectMapper.readValue(payload, DHTModel.class);

                    // Save using your existing service
                    dhtService.save(dhtModel);

                } catch (Exception e) {
                    log.error("Failed to process MQTT message", e);
                }
            });

        } catch (MqttException e) {
            log.error("MQTT subscription failed", e);
        }
    }
}